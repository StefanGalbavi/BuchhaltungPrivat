// <auto-generated />
using System;
using BuchhaltungPrivat;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuchhaltungPrivat.Migrations
{
    [DbContext(typeof(HBContext))]
    partial class HBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BuchhaltungPrivat.Class.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KontoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandingOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KontoId");

                    b.HasIndex("StandingOrderId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.Konto", b =>
                {
                    b.Property<int>("KontoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KontoId"), 1L, 1);

                    b.Property<decimal>("KontoAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("KontoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KontoName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KontoId");

                    b.ToTable("Konto");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.StandingOrder", b =>
                {
                    b.Property<int>("StandingOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandingOrderId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("KontoId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OderName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Repetition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StandingOrderDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StandingOrderDateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("StandingOrderId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("KontoId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("StandingOrder");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.Booking", b =>
                {
                    b.HasOne("BuchhaltungPrivat.Class.Category", "Category")
                        .WithMany("Booking")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BuchhaltungPrivat.Class.Konto", "Konto")
                        .WithMany("Booking")
                        .HasForeignKey("KontoId");

                    b.HasOne("BuchhaltungPrivat.Class.StandingOrder", "StandingOrder")
                        .WithMany()
                        .HasForeignKey("StandingOrderId");

                    b.HasOne("BuchhaltungPrivat.Class.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Category");

                    b.Navigation("Konto");

                    b.Navigation("StandingOrder");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.StandingOrder", b =>
                {
                    b.HasOne("BuchhaltungPrivat.Class.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("BuchhaltungPrivat.Class.Konto", "Konto")
                        .WithMany()
                        .HasForeignKey("KontoId");

                    b.HasOne("BuchhaltungPrivat.Class.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Category");

                    b.Navigation("Konto");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.SubCategory", b =>
                {
                    b.HasOne("BuchhaltungPrivat.Class.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.Category", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("BuchhaltungPrivat.Class.Konto", b =>
                {
                    b.Navigation("Booking");
                });
#pragma warning restore 612, 618
        }
    }
}
